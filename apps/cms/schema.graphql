# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type AppUser {
  id: ID!
  user_id: String
  provider: String
  provider_id: String
  email: String
  name: String
  role: String
  created_time: DateTime
  modified_time: DateTime
}

input AppUserWhereUniqueInput {
  id: ID
}

input AppUserWhereInput {
  AND: [AppUserWhereInput!]
  OR: [AppUserWhereInput!]
  NOT: [AppUserWhereInput!]
  id: IDFilter
  user_id: StringFilter
  provider: StringFilter
  provider_id: StringFilter
  email: StringFilter
  name: StringFilter
  role: StringFilter
  created_time: DateTimeNullableFilter
  modified_time: DateTimeNullableFilter
}

input AppUserOrderByInput {
  id: OrderDirection
  user_id: OrderDirection
  provider: OrderDirection
  provider_id: OrderDirection
  email: OrderDirection
  name: OrderDirection
  role: OrderDirection
  created_time: OrderDirection
  modified_time: OrderDirection
}

input AppUserUpdateInput {
  user_id: String
  provider: String
  provider_id: String
  email: String
  name: String
  role: String
  created_time: DateTime
  modified_time: DateTime
}

input AppUserUpdateArgs {
  where: AppUserWhereUniqueInput!
  data: AppUserUpdateInput!
}

input AppUserCreateInput {
  user_id: String
  provider: String
  provider_id: String
  email: String
  name: String
  role: String
  created_time: DateTime
  modified_time: DateTime
}

type FavoriteStore {
  id: ID!
  user_id: String
  store_id: String
}

input FavoriteStoreWhereUniqueInput {
  id: ID
}

input FavoriteStoreWhereInput {
  AND: [FavoriteStoreWhereInput!]
  OR: [FavoriteStoreWhereInput!]
  NOT: [FavoriteStoreWhereInput!]
  id: IDFilter
  user_id: StringFilter
  store_id: StringFilter
}

input FavoriteStoreOrderByInput {
  id: OrderDirection
  user_id: OrderDirection
  store_id: OrderDirection
}

input FavoriteStoreUpdateInput {
  user_id: String
  store_id: String
}

input FavoriteStoreUpdateArgs {
  where: FavoriteStoreWhereUniqueInput!
  data: FavoriteStoreUpdateInput!
}

input FavoriteStoreCreateInput {
  user_id: String
  store_id: String
}

type Keyword {
  id: ID!
  keyword_id: String
  keyword_name: String
  keyword_type: String
  store_keywords(where: StoreKeywordWhereInput! = {}, orderBy: [StoreKeywordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoreKeywordWhereUniqueInput): [StoreKeyword!]
  store_keywordsCount(where: StoreKeywordWhereInput! = {}): Int
}

input KeywordWhereUniqueInput {
  id: ID
  keyword_id: String
}

input KeywordWhereInput {
  AND: [KeywordWhereInput!]
  OR: [KeywordWhereInput!]
  NOT: [KeywordWhereInput!]
  id: IDFilter
  keyword_id: StringFilter
  keyword_name: StringFilter
  keyword_type: StringFilter
  store_keywords: StoreKeywordManyRelationFilter
}

input StoreKeywordManyRelationFilter {
  every: StoreKeywordWhereInput
  some: StoreKeywordWhereInput
  none: StoreKeywordWhereInput
}

input KeywordOrderByInput {
  id: OrderDirection
  keyword_id: OrderDirection
  keyword_name: OrderDirection
  keyword_type: OrderDirection
}

input KeywordUpdateInput {
  keyword_id: String
  keyword_name: String
  keyword_type: String
  store_keywords: StoreKeywordRelateToManyForUpdateInput
}

input StoreKeywordRelateToManyForUpdateInput {
  disconnect: [StoreKeywordWhereUniqueInput!]
  set: [StoreKeywordWhereUniqueInput!]
  create: [StoreKeywordCreateInput!]
  connect: [StoreKeywordWhereUniqueInput!]
}

input KeywordUpdateArgs {
  where: KeywordWhereUniqueInput!
  data: KeywordUpdateInput!
}

input KeywordCreateInput {
  keyword_id: String
  keyword_name: String
  keyword_type: String
  store_keywords: StoreKeywordRelateToManyForCreateInput
}

input StoreKeywordRelateToManyForCreateInput {
  create: [StoreKeywordCreateInput!]
  connect: [StoreKeywordWhereUniqueInput!]
}

type StoreKeyword {
  id: ID!
  store: Store
  keyword: Keyword
  store_id: String
  keyword_id: String
}

input StoreKeywordWhereUniqueInput {
  id: ID
}

input StoreKeywordWhereInput {
  AND: [StoreKeywordWhereInput!]
  OR: [StoreKeywordWhereInput!]
  NOT: [StoreKeywordWhereInput!]
  id: IDFilter
  store: StoreWhereInput
  keyword: KeywordWhereInput
  store_id: StringFilter
  keyword_id: StringFilter
}

input StoreKeywordOrderByInput {
  id: OrderDirection
  store_id: OrderDirection
  keyword_id: OrderDirection
}

input StoreKeywordUpdateInput {
  store: StoreRelateToOneForUpdateInput
  keyword: KeywordRelateToOneForUpdateInput
  store_id: String
  keyword_id: String
}

input StoreRelateToOneForUpdateInput {
  create: StoreCreateInput
  connect: StoreWhereUniqueInput
  disconnect: Boolean
}

input KeywordRelateToOneForUpdateInput {
  create: KeywordCreateInput
  connect: KeywordWhereUniqueInput
  disconnect: Boolean
}

input StoreKeywordUpdateArgs {
  where: StoreKeywordWhereUniqueInput!
  data: StoreKeywordUpdateInput!
}

input StoreKeywordCreateInput {
  store: StoreRelateToOneForCreateInput
  keyword: KeywordRelateToOneForCreateInput
  store_id: String
  keyword_id: String
}

input StoreRelateToOneForCreateInput {
  create: StoreCreateInput
  connect: StoreWhereUniqueInput
}

input KeywordRelateToOneForCreateInput {
  create: KeywordCreateInput
  connect: KeywordWhereUniqueInput
}

type Store {
  id: ID!
  store_id: String
  name: String
  address: String
  latitude: Float
  longitude: Float
  contact_number: String
  business_hours: String
  store_keywords(where: StoreKeywordWhereInput! = {}, orderBy: [StoreKeywordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoreKeywordWhereUniqueInput): [StoreKeyword!]
  store_keywordsCount(where: StoreKeywordWhereInput! = {}): Int
}

input StoreWhereUniqueInput {
  id: ID
  store_id: String
}

input StoreWhereInput {
  AND: [StoreWhereInput!]
  OR: [StoreWhereInput!]
  NOT: [StoreWhereInput!]
  id: IDFilter
  store_id: StringFilter
  name: StringFilter
  address: StringFilter
  latitude: FloatNullableFilter
  longitude: FloatNullableFilter
  contact_number: StringFilter
  business_hours: StringFilter
  store_keywords: StoreKeywordManyRelationFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input StoreOrderByInput {
  id: OrderDirection
  store_id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  latitude: OrderDirection
  longitude: OrderDirection
  contact_number: OrderDirection
  business_hours: OrderDirection
}

input StoreUpdateInput {
  store_id: String
  name: String
  address: String
  latitude: Float
  longitude: Float
  contact_number: String
  business_hours: String
  store_keywords: StoreKeywordRelateToManyForUpdateInput
}

input StoreUpdateArgs {
  where: StoreWhereUniqueInput!
  data: StoreUpdateInput!
}

input StoreCreateInput {
  store_id: String
  name: String
  address: String
  latitude: Float
  longitude: Float
  contact_number: String
  business_hours: String
  store_keywords: StoreKeywordRelateToManyForCreateInput
}

type SuggestedStore {
  id: ID!
  name: String
  businessHours: String
  address: String
  googleMapsLink: String
  website: String
  description: String
}

input SuggestedStoreWhereUniqueInput {
  id: ID
}

input SuggestedStoreWhereInput {
  AND: [SuggestedStoreWhereInput!]
  OR: [SuggestedStoreWhereInput!]
  NOT: [SuggestedStoreWhereInput!]
  id: IDFilter
  name: StringFilter
  businessHours: StringFilter
  address: StringFilter
  googleMapsLink: StringFilter
  website: StringFilter
  description: StringFilter
}

input SuggestedStoreOrderByInput {
  id: OrderDirection
  name: OrderDirection
  businessHours: OrderDirection
  address: OrderDirection
  googleMapsLink: OrderDirection
  website: OrderDirection
  description: OrderDirection
}

input SuggestedStoreUpdateInput {
  name: String
  businessHours: String
  address: String
  googleMapsLink: String
  website: String
  description: String
}

input SuggestedStoreUpdateArgs {
  where: SuggestedStoreWhereUniqueInput!
  data: SuggestedStoreUpdateInput!
}

input SuggestedStoreCreateInput {
  name: String
  businessHours: String
  address: String
  googleMapsLink: String
  website: String
  description: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAppUser(data: AppUserCreateInput!): AppUser
  createAppUsers(data: [AppUserCreateInput!]!): [AppUser]
  updateAppUser(where: AppUserWhereUniqueInput!, data: AppUserUpdateInput!): AppUser
  updateAppUsers(data: [AppUserUpdateArgs!]!): [AppUser]
  deleteAppUser(where: AppUserWhereUniqueInput!): AppUser
  deleteAppUsers(where: [AppUserWhereUniqueInput!]!): [AppUser]
  createFavoriteStore(data: FavoriteStoreCreateInput!): FavoriteStore
  createFavoriteStores(data: [FavoriteStoreCreateInput!]!): [FavoriteStore]
  updateFavoriteStore(where: FavoriteStoreWhereUniqueInput!, data: FavoriteStoreUpdateInput!): FavoriteStore
  updateFavoriteStores(data: [FavoriteStoreUpdateArgs!]!): [FavoriteStore]
  deleteFavoriteStore(where: FavoriteStoreWhereUniqueInput!): FavoriteStore
  deleteFavoriteStores(where: [FavoriteStoreWhereUniqueInput!]!): [FavoriteStore]
  createKeyword(data: KeywordCreateInput!): Keyword
  createKeywords(data: [KeywordCreateInput!]!): [Keyword]
  updateKeyword(where: KeywordWhereUniqueInput!, data: KeywordUpdateInput!): Keyword
  updateKeywords(data: [KeywordUpdateArgs!]!): [Keyword]
  deleteKeyword(where: KeywordWhereUniqueInput!): Keyword
  deleteKeywords(where: [KeywordWhereUniqueInput!]!): [Keyword]
  createStoreKeyword(data: StoreKeywordCreateInput!): StoreKeyword
  createStoreKeywords(data: [StoreKeywordCreateInput!]!): [StoreKeyword]
  updateStoreKeyword(where: StoreKeywordWhereUniqueInput!, data: StoreKeywordUpdateInput!): StoreKeyword
  updateStoreKeywords(data: [StoreKeywordUpdateArgs!]!): [StoreKeyword]
  deleteStoreKeyword(where: StoreKeywordWhereUniqueInput!): StoreKeyword
  deleteStoreKeywords(where: [StoreKeywordWhereUniqueInput!]!): [StoreKeyword]
  createStore(data: StoreCreateInput!): Store
  createStores(data: [StoreCreateInput!]!): [Store]
  updateStore(where: StoreWhereUniqueInput!, data: StoreUpdateInput!): Store
  updateStores(data: [StoreUpdateArgs!]!): [Store]
  deleteStore(where: StoreWhereUniqueInput!): Store
  deleteStores(where: [StoreWhereUniqueInput!]!): [Store]
  createSuggestedStore(data: SuggestedStoreCreateInput!): SuggestedStore
  createSuggestedStores(data: [SuggestedStoreCreateInput!]!): [SuggestedStore]
  updateSuggestedStore(where: SuggestedStoreWhereUniqueInput!, data: SuggestedStoreUpdateInput!): SuggestedStore
  updateSuggestedStores(data: [SuggestedStoreUpdateArgs!]!): [SuggestedStore]
  deleteSuggestedStore(where: SuggestedStoreWhereUniqueInput!): SuggestedStore
  deleteSuggestedStores(where: [SuggestedStoreWhereUniqueInput!]!): [SuggestedStore]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  appUser(where: AppUserWhereUniqueInput!): AppUser
  appUsers(where: AppUserWhereInput! = {}, orderBy: [AppUserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AppUserWhereUniqueInput): [AppUser!]
  appUsersCount(where: AppUserWhereInput! = {}): Int
  favoriteStore(where: FavoriteStoreWhereUniqueInput!): FavoriteStore
  favoriteStores(where: FavoriteStoreWhereInput! = {}, orderBy: [FavoriteStoreOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FavoriteStoreWhereUniqueInput): [FavoriteStore!]
  favoriteStoresCount(where: FavoriteStoreWhereInput! = {}): Int
  keyword(where: KeywordWhereUniqueInput!): Keyword
  keywords(where: KeywordWhereInput! = {}, orderBy: [KeywordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KeywordWhereUniqueInput): [Keyword!]
  keywordsCount(where: KeywordWhereInput! = {}): Int
  storeKeyword(where: StoreKeywordWhereUniqueInput!): StoreKeyword
  storeKeywords(where: StoreKeywordWhereInput! = {}, orderBy: [StoreKeywordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoreKeywordWhereUniqueInput): [StoreKeyword!]
  storeKeywordsCount(where: StoreKeywordWhereInput! = {}): Int
  store(where: StoreWhereUniqueInput!): Store
  stores(where: StoreWhereInput! = {}, orderBy: [StoreOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoreWhereUniqueInput): [Store!]
  storesCount(where: StoreWhereInput! = {}): Int
  suggestedStore(where: SuggestedStoreWhereUniqueInput!): SuggestedStore
  suggestedStores(where: SuggestedStoreWhereInput! = {}, orderBy: [SuggestedStoreOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SuggestedStoreWhereUniqueInput): [SuggestedStore!]
  suggestedStoresCount(where: SuggestedStoreWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
